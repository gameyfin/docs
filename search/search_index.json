{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Manage your video games. simple / fast / FOSS <p>Note: All video games depicted on this site are for demonstration purposes only. Gameyfin does not endorse or support piracy. Use with appropriately licensed video games only.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>While in Gameyfin v1 you had to set environment variables to configure the application, in Gameyfin v2 you can configure the application through the web interface. If you are logged in as an administrator, you can access the configuration page by clicking on the avatar icon in the top right corner of the application.</p>"},{"location":"configuration/#configuration-options","title":"Configuration Options","text":"<p>For a detailed description of the configuration options, please refer to the left sidebar.</p>"},{"location":"configuration/libraries/","title":"Libraries","text":""},{"location":"configuration/libraries/#permissions","title":"Permissions","text":""},{"location":"configuration/libraries/#allow-access-to-game-libraries-without-login","title":"Allow access to game libraries without login","text":"<p>Default: <code>false</code> This option allows users to access game libraries without logging in (great if you want to share your game library with friends or family).</p>"},{"location":"configuration/libraries/#scanning","title":"Scanning","text":""},{"location":"configuration/libraries/#enable-automatic-scanning-using-file-system-watchers","title":"Enable automatic scanning using file system watchers","text":"<p>Default: <code>true</code> This option enables automatic scanning of game libraries using file system watchers. This way Gameyfin will automatically detect changes in your game libraries and update the database accordingly.</p>"},{"location":"configuration/libraries/#scan-empty-directories","title":"Scan empty directories","text":"<p>Default: <code>false</code> This option allows Gameyfin to scan empty directories in your game libraries. This is useful if you want to keep track of directories that do not contain any games, but it may slow down the scanning process.</p>"},{"location":"configuration/libraries/#minimum-ratio-for-title-matching","title":"Minimum ratio for title matching","text":"<p>Default: <code>90</code> Range: <code>0-100</code> This option filters the results of the title matching algorithm. If the ratio is below this value, the title will not be matched. Lowering this value may result in more matches, but it may also result in more false matches.</p>"},{"location":"configuration/libraries/#file-extensions-to-consider-as-games","title":"File extensions to consider as games","text":"<p>Default: <code>zip,tar,gz,rar,7z,bz2,xz,iso,jar,tgz,exe,bat,cmd,com,msi,bin,run,app,dmg,elf</code> This option allows you to specify which file extensions should be considered as games.</p>"},{"location":"configuration/libraries/#metadata","title":"Metadata","text":""},{"location":"configuration/libraries/#enable-periodic-refresh-of-video-game-metadata","title":"Enable periodic refresh of video game metadata","text":"<p>Default: <code>true</code> This option enables periodic refresh of video game metadata. Gameyfin will automatically update the metadata of your games based on the configured sources.</p>"},{"location":"configuration/libraries/#schedule-for-periodic-metadata-refresh","title":"Schedule for periodic metadata refresh","text":"<p>Default: <code>0 0 * * 0</code> (every Sunday at midnight) This option allows you to configure the schedule for periodic metadata refresh. The format is a cron expression.</p>"},{"location":"configuration/libraries/#libraries_1","title":"Libraries","text":"<p>This section allows you to manage your game libraries in Gameyfin. Add a new library, scan a library for games or open the administration page of a library.</p>"},{"location":"configuration/libraries/#library-administration","title":"Library administration","text":""},{"location":"configuration/libraries/#details","title":"Details","text":"<p>This section allows you to manage the details of your game library, such as the name and file system paths of library. You can also delete the library from here.</p>"},{"location":"configuration/libraries/#games","title":"Games","text":"<p>This section allows you to manage the games in your library. You can edit the details of a game, delete a game or match a game manually. If you delete a game, its path will be added as \"unmatched path\", effectively excluding it from future scans.</p>"},{"location":"configuration/libraries/#unmatched-paths","title":"Unmatched paths","text":"<p>This section allows you to manage the unmatched paths in your library. If you delete an unmatched path, it will be included in future scans again.</p>"},{"location":"configuration/logs/","title":"Logs","text":""},{"location":"configuration/logs/#configuration","title":"Configuration","text":""},{"location":"configuration/logs/#storage-folder-for-log-files","title":"Storage folder for log files","text":"<p>Default: <code>./logs</code> This option allows you to specify the storage folder for log files. The logs will be stored in this folder, and you can access them through the web interface.</p>"},{"location":"configuration/logs/#log-retention-in-days","title":"Log retention in days","text":"<p>Default: <code>30</code> This option allows you to specify how many days log files should be retained. After this period, log files will be automatically deleted.</p>"},{"location":"configuration/logs/#log-level-gameyfin","title":"Log level (Gameyfin)","text":"<p>Default: <code>INFO</code> This option allows you to specify the log level for Gameyfin and official plugins.</p>"},{"location":"configuration/logs/#log-level-root","title":"Log level (Root)","text":"<p>Default: <code>WARN</code> This option allows you to specify the log level for the rest of the application and third-party plugins.</p>"},{"location":"configuration/logs/#application-logs","title":"Application logs","text":"<p>Gameyfin will display a real-time view of the application logs in the web interface here.</p>"},{"location":"configuration/messages/","title":"Messages","text":""},{"location":"configuration/messages/#e-mail","title":"E-Mail","text":""},{"location":"configuration/messages/#enable-e-mail-notifications","title":"Enable e-mail notifications","text":"<p>Default: <code>false</code> This option enables e-mail notifications in Gameyfin. If enabled, users will receive e-mails for various events (see \"Message Templates\").</p>"},{"location":"configuration/messages/#e-mail-server-configuration","title":"E-Mail server configuration","text":"<p>This section allows you to configure the e-mail server for sending notifications. You will need to provide the following information:</p> <ul> <li>URL: The hostname of your e-mail server.</li> <li>Port: The port of your e-mail server.</li> <li>Username: The username for your e-mail server.</li> <li>Password: The password for your e-mail server (optional).</li> </ul> <p>You can test the e-mail server configuration by clicking the \"Test\" button.</p>"},{"location":"configuration/messages/#message-templates","title":"Message Templates","text":"<p>This section allows you to configure the message templates for e-mail notifications. You can also send test messages to verify the configuration.</p>"},{"location":"configuration/plugins/","title":"Plugins","text":"<p>On this page you can manage the plugins installed in Gameyfin. You can enable or disable plugins, as well as configure their settings. The configuration options vary from plugin to plugin, so please refer to the documentation of each plugin for more information.</p> <p>For more information about Gameyfin plugins, please refer to the Plugins page.</p>"},{"location":"configuration/sso/","title":"SSO","text":""},{"location":"configuration/sso/#sso-configuration","title":"SSO configuration","text":""},{"location":"configuration/sso/#enable-sso-via-oidcoauth2","title":"Enable SSO via OIDC/OAuth2","text":"<p>Default: <code>false</code> This option enables Single Sign-On (SSO) via OIDC/OAuth2. If enabled, users can log in using your configured OIDC/OAuth2 provider.</p>"},{"location":"configuration/sso/#sso-user-handling","title":"SSO user handling","text":""},{"location":"configuration/sso/#automatically-create-users-after-registration","title":"Automatically create users after registration","text":"<p>Default: <code>true</code> This option automatically creates users in Gameyfin after they register via SSO. If disabled, SSO users will not be persisted in Gameyfin.</p>"},{"location":"configuration/sso/#match-existing-users-by","title":"Match existing users by","text":"<p>Default: <code>username</code> This option allows you to specify how existing users should be matched with SSO users. You can choose between <code>username</code> and <code>email</code>.</p>"},{"location":"configuration/sso/#sso-provider-configuration","title":"SSO provider configuration","text":"<p>This section allows you to configure your OIDC/OAuth2 provider for SSO. You will need to provide the following information:</p> <ul> <li>Client ID: The client ID of your OIDC/OAuth2 application.</li> <li>Client Secret: The client secret of your OIDC/OAuth2 application.</li> <li>Issuer URL: The issuer URL of your OIDC/OAuth2 provider.</li> </ul> <p>The rest can be autopopulated by clicking the \"Auto-populate\" button. However, you can also configure the options automatically.</p>"},{"location":"configuration/users/","title":"Users","text":""},{"location":"configuration/users/#sign-ups","title":"Sign-Ups","text":""},{"location":"configuration/users/#allow-new-users-to-sign-up-by-themselves","title":"Allow new users to sign up by themselves","text":"<p>Default: <code>false</code> This option allows new users to sign up by themselves. If disabled, only administrators can create new users.</p>"},{"location":"configuration/users/#admins-need-to-confirm-new-users","title":"Admins need to confirm new users","text":"<p>Default: <code>true</code> This option requires administrators to confirm new users before they can log in. If disabled, new users can log in immediately after signing up.</p>"},{"location":"configuration/users/#users_1","title":"Users","text":"<p>This section allows you to manage users in Gameyfin. You can create, edit, and delete users, as well as assign roles and permissions.</p>"},{"location":"faq/","title":"FAQ","text":"<p>Beta release</p> <p>The matching algorithm is the heart of Gameyfin and it is not perfect yet. Feedback is always welcome, so if you have any issues with the matching process, please open an issue on GitHub.</p>"},{"location":"faq/#frequently-asked-questions","title":"Frequently Asked Questions","text":""},{"location":"faq/#gameyfin-doesnt-start-because-of-permission-issues","title":"Gameyfin doesn't start because of permission issues","text":"<p>Gameyfin requires access to the filesystem to scan your game libraries and to read the game files. If you run Gameyfin as a non-root user, you need to make sure that the user has read access to the game files and directories. You can also configure the user and group that Gameyfin should run as in the <code>docker-compose.yml</code> file.</p>"},{"location":"faq/#library-scan-progress-andor-application-logs-are-not-shown-in-the-ui","title":"Library scan progress and/or application logs are not shown in the UI","text":"<p>Gameyfin uses websockets extensively to send real-time updates to the UI. If you don't see the progress or logs in the UI, check if your reverse proxy is configured correctly to support websockets and that the websocket connection is not blocked by your browser or network settings.</p>"},{"location":"faq/#how-does-gameyfin-match-my-video-games","title":"How does Gameyfin match my video games?","text":"<p>The matching algorithm grew a bit more complex compared to the v1 version. Thanks to the new plugin system, Gameyfin can now match games using various sources. Since the plugins can have different matching strategies and algorithms, the matching process is now more flexible and can be customized by the user (by using different plugins or by configuring their plugins). The matching process for library scans is as follows:  </p> <ol> <li>Filesystem Scan: Gameyfin scans the filesystem of your libraries for game files and directories.</li> <li>Filename Extraction: It extracts the names of all new game files and directories found in the scan.</li> <li>Result Iteration: Iterating over the extracted filenames, Gameyfin will try to match each filename using the installed plugins.<ol> <li>The matching process is done in parallel for all plugins so the process takes as long as the slowest plugin to respond (usually IGDB because they enforce rate limits on their API).</li> </ol> </li> <li>Plugin Matching: Each installed plugin is queried with a filename to match against its own database or API.<ol> <li>The plugins have their own matching strategies, so the result quality may vary depending on the plugin used.</li> <li>Each plugin returns one result, which is the best match it found for the given filename.</li> </ol> </li> <li>Title Normalization: The titles of the results are normalized to lowercase and to only include alphanumeric characters and spaces. Roman numerals are converted to Arabic numerals.<ol> <li>This is done to ensure that the titles are consistent and can be matched correctly across different data sources.</li> </ol> </li> <li>Result Filter: The results from all plugins are filtered based on the normalized game title.<ol> <li>The closest match is determined using fuzzy matching, which allows for minor differences in titles, such as typos or different naming conventions.</li> <li>All other results that do not match the title with a minimum ratio are discarded.</li> <li>The filter can be configured.</li> </ol> </li> <li>Result Merging: The results from each plugin are merged into a single result.<ol> <li>The merging uses the configured plugin priorities to determine which plugin's data to use for each field.</li> <li>It starts with the first plugin in the priority list and uses its data for all fields. If a field is not set, it will use the next plugin's data in the priority list.</li> <li>This continues until all fields are filled or all plugins have been checked.</li> </ol> </li> <li>Final Result: The final result is a game enriched with metadata from the plugins, which is linked to the game file or directory on your filesystem.</li> </ol> <p>The matching process for manual matching via UI is similar, but instead of returning just the top match from each plugin, it returns the top 10 matches from each plugin. These matches are then grouped based on title (strict matching instead of fuzzy matching) and release year. The user can then select the best match from the list of matches.</p>"},{"location":"faq/#how-can-i-improve-the-matching-accuracy","title":"How can I improve the matching accuracy?","text":"<p>There are several ways to improve the matching accuracy:</p> <ol> <li>Use more plugins: The more plugins you have installed and enabled, the more sources Gameyfin can use to match your games. This increases the chances of finding a match.</li> <li>Rename your game files: The closer the game file names are to the actual game titles, the better the matching accuracy.    Gameyfin uses fuzzy matching, so even if the file name is not exactly the same as the game title, it can still find a match.</li> </ol>"},{"location":"faq/#how-will-the-matching-process-change-in-the-future","title":"How will the matching process change in the future?","text":"<p>The matching process is still evolving and will continue to improve over time. Jellyfin for example has an interesting feature that allows users to include the ID of a game in the file name, which can be used to match the game more accurately.</p> <p>Again, I am always open to suggestions and feedback, so if you have any ideas on how to improve the matching process, please open an issue on GitHub.</p>"},{"location":"faq/#whats-the-difference-between-quick-scan-and-full-scan","title":"What's the difference between \"quick scan\" and \"full scan\"?","text":"<p>The \"quick scan\" only scans for new games while the \"full scan\" also updates existing games.</p> <p>This means that the \"quick scan\" will only add new games to your library, while the \"full scan\" will also update the metadata of existing games. Fields that have been modified by a user will not be overwritten by the \"full scan\", so you can safely run it without losing your changes.</p> <p>If you want to reset the metadata of a game, you can do so by using the \"Search for metadata\" button and selecting a search result. This process will update the metadata of the game with the latest data and will overwrite any changes made by users.</p>"},{"location":"guides/","title":"Guides","text":""},{"location":"guides/#sso","title":"SSO","text":""},{"location":"guides/#authentik","title":"Authentik","text":"<p>See Authentik SSO Guide.</p>"},{"location":"guides/sso/authentik/","title":"Authentik","text":""},{"location":"guides/sso/authentik/#create-an-application-in-authentik","title":"Create an application in Authentik","text":"<p>Create a new application in Authentik to enable Single Sign-On (SSO) for Gameyfin.</p> <p>Go to <code>Applications &gt; Applications &gt; Create with Provider</code> and follow these steps:</p> <ol> <li>Application: Fill out to your liking.</li> <li>Choose a Provider: <code>OAuth2/OpenID Provider</code></li> <li>Configure Provider:<ul> <li>Client type: <code>Confidential</code></li> <li>Redirect URIs: <code>http(s)://&lt;your-gameyfin-domain&gt;/login/oauth2/code/oidc</code> (or leave empty for automatic detection)</li> </ul> </li> <li>Configure Bindings: Bind policies to the application as needed.</li> <li>Review and Submit Application: Your settings should look similar to this:    </li> </ol>"},{"location":"guides/sso/authentik/#create-a-property-mapping","title":"Create a property mapping","text":"<p>Gameyfin is able to read the users roles from SSO. To do this, you need to create groups and a property mapping in Authentik.</p> <p>First create two groups in Authentik (<code>Directory &gt; Groups &gt; Create</code>), one for superadmins and one for admins. Then go to <code>Customization &gt; Property Mappings &gt; Create</code> and create a new mapping with the following settings:</p> <ul> <li>Scope name: <code>profile</code></li> <li>Expression: Fill out the placeholders with the groups you created above:    <pre><code>if ak_is_group_member(request.user, name=\"&lt;your superadmin group name&gt;\"):\n  return { \"roles\": [\"GAMEYFIN_SUPERADMIN\"] }\nif ak_is_group_member(request.user, name=\"&lt;your admin group name&gt;\"):\n  return { \"roles\": [\"GAMEYFIN_ADMIN\"] }\n</code></pre></li> </ul> <p>Add your users to their respective groups in Authentik. Users that are not in either group will automatically be assigned the \"User\" role.</p>"},{"location":"guides/sso/authentik/#configure-gameyfin","title":"Configure Gameyfin","text":"<p>Go to Gameyfin's SSO settings page (<code>Administration &gt; SSO</code>), enable SSO and fill out the SSO provider configuration with the values from Authentik. You can use \"Auto-populate\" to fill most the values automatically, or copy them manually from the Authentik application you created earlier.</p> <p>Hint: \"Auto-populate\" will only work if Gameyfin and Authentik are hosted under the same domain or if you have configured a CORS policy for Authentik that allows calls from your Gameyfin domain. This is not an issue of Gameyfin but rather a security measure implemented by Authentik.</p> <p>Restart Gameyfin to apply the changes.</p> <p>Hint: If there is a problem with your SSO configuration, and you can't log in, simply append <code>?direct=1</code> to the URL to bypass SSO and login with your username and password.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#docker-recommended","title":"Docker (recommended)","text":"<p>See Docker Installation.</p>"},{"location":"installation/#unraid","title":"Unraid","text":"<p>TBD (not supported in beta)</p>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>TBD (not supported in beta)</p>"},{"location":"installation/docker/","title":"Docker Installation","text":"<p>Beta release</p> <p>During the beta phase, Gameyfin is only available as a Docker image. This is a temporary measure until the stable release, after which a other installation methods will be provided.</p>"},{"location":"installation/docker/#docker-installation","title":"Docker Installation","text":"<p>Docker is the recommended way to run Gameyfin, as it simplifies the installation process and reduces the likelihood of issues related to dependencies and environment configuration.</p> <p>The Gameyfin Docker image is currently available on Docker Hub.</p>"},{"location":"installation/docker/#docker-compose","title":"Docker Compose","text":"<p>You can use Docker Compose to run Gameyfin.</p>"},{"location":"installation/docker/#environment-variables","title":"Environment Variables","text":"<p>Contrary to Gameyfin v1 almost no configuration via environment variables is required to run Gameyfin.  </p>"},{"location":"installation/docker/#app_key","title":"APP_KEY","text":"<p>The only required environment variable is <code>APP_KEY</code>, which Gameyfin uses to encrypt sensitive data in the database. The app key  must be a 16, 24 or 32 byte long Base64 encoded string, which can be generated using the following command:</p> <pre><code>openssl rand -base64 32\n</code></pre>"},{"location":"installation/docker/#app_url","title":"APP_URL","text":"<p>If you are using Gameyfin with a reverse proxy, you should also set the <code>APP_URL</code> environment variable to the URL of your Gameyfin instance (e.g. <code>https://gameyfin.example.com</code>).</p>"},{"location":"installation/docker/#puid-pgid","title":"PUID &amp; PGID","text":"<p>If you want to run Gameyfin with a specific user and group ID, you can set the <code>PUID</code> and <code>PGID</code> environment variables.</p>"},{"location":"installation/docker/#volumes-and-ports","title":"Volumes and Ports","text":"<p>The volumes for the database, data, and logs should be mounted to the host system to persist data across container restarts. Additionally, you have to mount your library folder(s) to the container, so Gameyfin can access your media files. Finally if you want to use the included torrent plugin, you need to expose the necessary ports (6969 for the tracker and 6881 for the torrent client). The ports can be changed if needed (either by mapping to another port on your host or by changing the plugin configuration), but the default ports are recommended for compatibility with other applications.</p>"},{"location":"installation/docker/#compose-file","title":"Compose File","text":"<p>You can use the following <code>docker-compose.yml</code> file to run Gameyfin:</p> docker-compose.yml<pre><code>services:\n  gameyfin:\n    image: grimsi/gameyfin:2.0.0.beta3 # Replace with the latest version tag from Docker Hub\n    container_name: gameyfin\n    restart: unless-stopped\n    environment:\n      # Generate a new APP_KEY using the command `openssl rand -base64 32` or similar.\n      APP_KEY: &lt;you app key here&gt;\n\n      # (optional) Set the URL of your Gameyfin instance if you are using a reverse proxy.\n      #  APP_URL: https://gameyfin.example.com # Change this to your actual URL if needed\n\n      # (optional) Set the user and group ID to run Gameyfin with a specific user.\n      # PUID: 1000 # Change this to your user ID if needed\n      # PGID: 1000 # Change this to your group ID if needed\n    volumes:\n      - \"./db:/opt/gameyfin/db\"\n      - \"./data:/opt/gameyfin/data\"\n      - \"./logs:/opt/gameyfin/logs\"\n      - &lt;mount your library folder(s) here&gt;\n    ports:\n      - \"8080:8080\"\n      # If you plan to use the included torrent plugin, uncomment the following lines (optional):\n      # - \"6969:6969\"\n      # - \"6881:6881\"\n</code></pre> <p>Start Gameyfin using Docker Compose with the following command:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Observe the logs to ensure that Gameyfin starts correctly:</p> <p><pre><code>docker-compose logs -f gameyfin\n</code></pre> The logs should contain the message <code>Loaded plugins: &lt;list of plugins&gt;</code> when the application is ready. You should now be able to access Gameyfin at <code>http://&lt;docker-host-ip-or-hostname&gt;:8080</code> (or <code>APP_URL</code> if it's behind a reverse proxy) in your web browser.</p>"},{"location":"installation/docker/#first-steps","title":"First steps","text":"<p>Proceed to the Getting Started guide to learn how to configure Gameyfin and add your media library.</p>"},{"location":"installation/getting-started/","title":"Getting Started with Gameyfin","text":"<p>After installing Gameyfin and opening the web interface, you will be greeted with the setup page. This page will guide you through the initial configuration of Gameyfin.  </p>"},{"location":"installation/getting-started/#initial-setup","title":"Initial Setup","text":"<p>Choose your preferred theme and click on the right arrow to proceed. You will then be asked to create an admin account. That's it! You can now log in with your new admin account.</p>"},{"location":"installation/getting-started/#configuring-the-plugins","title":"Configuring the Plugins","text":"<p>Gameyfin comes with a set of pre-installed plugins that provide various functionalities. You need to enable and configure the plugins you want to use. To do this, go to the Plugins section in the admin interface (click on your avatar in the top right corner).  </p>"},{"location":"installation/getting-started/#plugin-management-page","title":"Plugin Management Page","text":"<p>Here you will see a list of all available plugins and by clicking on the Configure button you can access the configuration page of each plugin. The page also contains a short documentation for each plugin, which explains its functionality and how to use it.  </p>"},{"location":"installation/getting-started/#plugin-priority","title":"Plugin Priority","text":"<p>On the right hand side, you will find a button to prioritize the plugins. For game metadata plugins, the order in which they are listed determines how Gameyfin will search for metadata. For download providers, the order determines which provider will be shown on top of the list for your users.</p>"},{"location":"installation/getting-started/#enabling-plugins","title":"Enabling Plugins","text":"<p>To enable a plugin, click on the On/Off button next to the Configure button. If your configuration is valid (you can check this by saving the configuration or by clicking the Cirle Arrow button above the configuration options), the plugin will be enabled, and you will see a green checkmark at the bottom of the plugin card.</p>"},{"location":"installation/getting-started/#libraries","title":"Libraries","text":"<p>Go to the Libraries section in the admin interface to add your media libraries. You can do this by clicking on the Add Library button near the bottom of the page. Add at least one source folder to the library, so Gameyfin can scan your media files. After that you can configure the library and its contents by clicking on the Configure button.</p>"},{"location":"installation/getting-started/#games","title":"Games","text":"<p>After you have scanned your first library, you can go to the home page of Gameyfin and browse your library.</p>"},{"location":"installation/getting-started/#next-steps","title":"Next Steps","text":"<p>You can now start using Gameyfin!</p>"},{"location":"installation/getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues, please refer to this documentation or the Github Issues for help.</p>"},{"location":"installation/migration-from-v1/","title":"Migration from Gameyfin v1","text":"<p>To keep it short: a straight migration from Gameyfin v1 to v2 is not possible. Gameyfin v2 is a complete rewrite of the application (in different programming languages even), and as such, it does not support direct migration of data from Gameyfin v1. The database structure has changed significantly and a lot of new fields have been implemented to support the many new features of Gameyfin v2.</p> <p>Sorry for the inconvenience, but this was necessary to provide a better user experience and to support the new features of Gameyfin v2. Depending on the size of your game library, the migration process may take a few minutes, but it is a one-time process (hopefully).</p>"},{"location":"installation/migration-from-v1/#what-to-do","title":"What to do?","text":"<ol> <li>Backup your Gameyfin v1 data: Make sure to back up your Gameyfin v1 data, especially the database file and any custom configurations you may have.</li> <li>Install Gameyfin v2: Follow the installation guide to install Gameyfin v2.</li> <li>Reconfigure your settings: You will need to reconfigure your settings in Gameyfin v2. Some settings may have changed or been removed, so please refer to the documentation for the new settings.</li> <li>Reimport your data: Add your game libraries again in Gameyfin v2. You will need to reimport your games and their metadata. Gameyfin v2 supports importing from various sources, so you can choose the one that suits you best.</li> </ol>"},{"location":"plugins/","title":"Plugins","text":""},{"location":"plugins/#how-gameyfin-plugins-work","title":"How Gameyfin Plugins work","text":"<p>Gameyfin plugins are designed to extend the functionality of the application by allowing developers to create custom features or integrate with external services. Plugins can (currently) be used to fetch game metadata and provide download capabilities.</p> <p>Plugins can be enabled or disabled in the Admin UI at runtime, but Gameyfin has to be restarted after you (un)install a plugin.</p>"},{"location":"plugins/#types-of-plugins","title":"Types of Plugins","text":"<p>Gameyfin supports two types of plugins:</p> <ul> <li>Game Metadata Plugins: These plugins are used to fetch metadata for games from external sources.</li> <li>Download Provider Plugins: These plugins are used to provide download functionality for games.</li> </ul>"},{"location":"plugins/#bundled-plugins","title":"Bundled Plugins","text":"<p>Gameyfin comes with several bundled plugins that provide essential functionality:</p> <ul> <li>IGDB Metadata Plugin: This plugin fetches game metadata from IGDB.</li> <li>Steam Metadata Plugin: This plugin fetches game metadata from Steam using undocumented APIs.</li> <li>SteamGridDB Metadata Plugin: This plugin fetches only covers from SteamGridDB.</li> <li>Direct Download Plugin: This plugin allows your users to directly download games in their web browser.</li> <li>Torrent Download Plugin: This plugin runs a built-in torrent tracker and offers users to download via Torrent so the network load is distributed between all users that download a game.</li> </ul>"},{"location":"plugins/info-for-devs/","title":"Information for Developers","text":"<p>Unstable Feature</p> <p>Gameyfin's plugin API is currently in an unstable state. Expect breaking changes until the release of <code>2.0.0</code> (probably even after that).</p>"},{"location":"plugins/info-for-devs/#how-to-create-a-plugin","title":"How to create a Plugin","text":"<p>The plugin system is based on PF4J which allows you to create plugins in Java or Kotlin. Depending on the type of plugin you want to create, you will need to implement the appropriate interfaces. The Gameyfin Plugin API is published as a Maven artifact on Maven Central, so you can easily include it in your project.</p> <p>For a quick start, you can follow the tutorial.</p>"},{"location":"plugins/info-for-devs/#structure-of-a-plugin","title":"Structure of a Plugin","text":"<p>A Gameyfin plugin typically consists of the following components:</p>"},{"location":"plugins/info-for-devs/#plugin-manifest","title":"Plugin Manifest","text":"<p>The plugin manifest is a Manifest file that contains metadata about the plugin. It should be located in the <code>META-INF/MANIFEST.MF</code> file of your plugin JAR file.</p> Field Description Plugin-Version Version of the plugin in SemVer format Plugin-Class Fully qualified class name of your plugin wrapper class Plugin-Id Unique ID for your plugin. It is recommended to either use a unique reverse-DNS identifier or a UUID. Plugin-Name Name of your plugin Plugin-Description Description of the functionality of your plugin in Markdown format. Use <code>&lt;br&gt;</code> for line breaks and start suceeding lines with one space. Plugin-Author Name(s) of the plugin authors (if the plugin has multiple authors, use a comma-separated string) Plugin-Short-Description<sup>1</sup> Shorter description of your plugin (not in Markdown). Used primarily for display in various smaller UI elements (falls back to \"Plugin-Description\" if empty). Plugin-Url<sup>1</sup> URL to the website of your plugin (e.g. the GitHub repository containing the plugin source code) Plugin-License<sup>1</sup> Name of the license for the plugin (e.g. \"MIT\", \"AGLPv3\", ...)"},{"location":"plugins/info-for-devs/#source-code","title":"Source Code","text":"<p>Gameyfin plugins are written in Java or Kotlin (although any language that compiles to JVM bytecode can be used in theory). The source code of the plugin should be organized in a way that follows the standard Java/Kotlin project structure.</p>"},{"location":"plugins/info-for-devs/#plugin-wrapper-class","title":"Plugin Wrapper Class","text":"<p>The plugin wrapper class is the main class of your plugin that extends either <code>GameyfinPlugin</code> or <code>ConfigurableGameyfinPlugin</code> (depending on whether your plugin requires configuration). Your wrapper class should contain one or more inner classes that implement the necessary interfaces for your plugin type. These inner classes will be used by Gameyfin to interact with your plugin and should be annotated with <code>@Extension</code>. Depending on the type of plugin, you will need to implement specific methods that Gameyfin will call to interact with your plugin.</p>"},{"location":"plugins/info-for-devs/#configurable-plugins","title":"Configurable Plugins","text":"<p>If your plugin requires configuration, you should extend <code>ConfigurableGameyfinPlugin</code> instead of <code>GameyfinPlugin</code>. This also means that your plugin will have a configuration page in the Admin UI. In order for Gameyfin to be able to display the configuration page, your plugin needs to implement two things:</p> <ul> <li>A <code>configMetadata</code> property of type <code>ConfigMetadata</code> that contains the metadata of your plugin configuration.</li> <li>The <code>validateConfig</code> method that validates the configuration and returns a <code>PluginConfigValidationResult</code>.</li> </ul> <p>For an example of how to implement plugin configuration, take a look at the tutorial.</p> <ol> <li> <p>Optional fields that are not required for the plugin to work, but recommended to be set.\u00a0\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"plugins/security/","title":"Plugin Security","text":"<p>Security Warning</p> <p>Gameyfin plugins run in the same JVM as the main application, which means they have access to the same resources and can potentially cause security issues.</p> <p>Gameyfin does not currently implement a sandbox for plugins, so it is important to only use plugins from trusted sources. However, Gameyfin does separate the plugins into different trust levels (from most trusted to least trusted) to help you make informed decisions about which plugins to use:</p> <ul> <li>Bundled Plugins: These plugins are included with Gameyfin and are considered safe to use if you download Gameyfin from a trusted source.</li> <li>Official Plugins: These plugins are developed by the Gameyfin team or trusted contributors and are considered safe to use. They are signed with a digital signature to verify their authenticity.</li> <li>Community Plugins: These plugins are developed by the community. They are not signed and should be used with caution.</li> <li>Untrusted Plugins: These plugins are signed, but the signature is invalid or not recognized by Gameyfin. They are considered untrusted and should not be used.</li> </ul> <p>Gameyfin will display the trust level of a plugin in the Admin UI, but it does not restrict you from using any plugins you wish to use. Also, plugins will only be started automatically after their installation if they are bundled with Gameyfin or signed by a trusted source.</p>"},{"location":"plugins/tutorial/","title":"Plugin Development Tutorial","text":"<p>Unstable Feature</p> <p>Gameyfin's plugin API is currently in an unstable state. Expect breaking changes until the release of <code>2.0.0</code> (probably even after that).</p>"},{"location":"plugins/tutorial/#plugin-development-tutorial","title":"Plugin Development Tutorial","text":"<p>In this tutorial, we will walk through the process of creating a plugin for Gameyfin. We will cover the prerequisites, set up your development environment, and create a simple plugin.</p>"},{"location":"plugins/tutorial/#prerequisites","title":"Prerequisites","text":"<p>Before you start developing plugins for Gameyfin, ensure you have the following prerequisites:</p> <ul> <li>Basic knowledge of Java or Kotlin (recommended)</li> <li>Familiarity with Gradle build system</li> <li>An IDE such as IntelliJ IDEA (recommended) or VS Code</li> <li>Java Development Kit (JDK) 21 or higher installed on your machine</li> <li>Gameyfin installed and running (see Installation Guide)</li> </ul> <p>The tutorial will be written in Kotlin, but you can also use Java if you prefer. We will use Gradle as the build system, which is the standard for Gameyfin plugins. As IDEs, we recommend using IntelliJ IDEA for Kotlin development, but you can also use VS Code with the Kotlin extension.</p>"},{"location":"plugins/tutorial/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<p>Open your IDE and create a new Gradle project. You can use the following settings (change name, grouId and artifactId): </p>"},{"location":"plugins/tutorial/#build-script-configuration","title":"Build Script Configuration","text":"<p>Open the <code>build.gradle.kts</code> file and configure it for your plugin development. Here\u2019s a basic setup:</p> <ol> <li> <p>Read version from plugin manifest file: Add the following code to read the version from the <code>MANIFEST.MF</code> file (this file will be created in a later step):    <pre><code>// Read the version from the MANIFEST.MF file in resources\nval manifestFile = file(\"src/main/resources/MANIFEST.MF\")\nval manifestVersion: String? = if (manifestFile.exists()) {\n    Manifest(manifestFile.inputStream()).mainAttributes.getValue(\"Plugin-Version\")\n} else null\nversion = manifestVersion ?: \"1.0-SNAPSHOT\"\n</code></pre></p> </li> <li> <p>Plugins: Add the following plugins:    <pre><code>plugins {\n  //... other plugins\n  id(\"com.google.devtools.ksp\") version \"2.1.21-2.0.1\" // match with your Kotlin version\n}\n</code></pre>    KSP (Kotlin Symbol Processing) is used for annotation processing in Kotlin.</p> </li> <li> <p>Dependencies: Add the following dependencies (check for their latest versions):    <pre><code>dependencies {\n  // ... other dependencies\n  ksp(\"care.better.pf4j:pf4j-kotlin-symbol-processing:2.1.21-1.0.2\") // match with your Kotlin version\n\n  compileOnly(\"org.gameyfin:plugin-api:2.0.0.beta1\") // match with your Gameyfin version\n}\n</code></pre></p> </li> <li>Build Script: Ensure your <code>build.gradle.kts</code> file is set up to build a JAR file containing your plugin code and resources:    <pre><code>tasks.jar { \n   duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n   isZip64 = true\n   archiveBaseName.set(\"plugin-${project.name}\")\n\n   manifest { \n       from(\"./src/main/resources/MANIFEST.MF\")\n   }\n\n   from(configurations.runtimeClasspath.get().map { project.zipTree(it) }) {\n       exclude(\"META-INF/*.SF\")\n       exclude(\"META-INF/*.DSA\")\n       exclude(\"META-INF/*.RSA\")\n   }\n\n   from(sourceSets[\"main\"].output.classesDirs)\n   from(sourceSets[\"main\"].resources)\n\n   // Include logo file under META-INF/resources\n   from(\"src/main/resources\") {\n       include(\"logo.*\")\n       into(\"META-INF/resources\")\n   }\n}\n\ntasks.register&lt;Copy&gt;(\"copyDependencyClasses\") { \n   dependsOn(tasks.jar)\n   duplicatesStrategy = DuplicatesStrategy.EXCLUDE\n   from(configurations.runtimeClasspath.get().map { project.zipTree(it) }) { \n       include(\"**/*.class\")\n   }\n   into(layout.buildDirectory.get().asFile.resolve(\"classes/kotlin/main\")) \n}\n\ntasks.build {\n   dependsOn(\"copyDependencyClasses\")\n}\n</code></pre></li> </ol>"},{"location":"plugins/tutorial/#creating-your-first-plugin","title":"Creating Your First Plugin","text":"<ol> <li> <p>Manifest File: Create a <code>MANIFEST.MF</code> file in <code>src/main/resources</code> with the following content (the content is explained here):    <pre><code>Plugin-Version: 1.0.0\nPlugin-Class: org.gameyfin.plugins.TutorialPlugin\nPlugin-Id: org.gameyfin.plugins.helloworld\nPlugin-Name: Gameyfin Example Plugin\nPlugin-Description: Demonstrates how to implement a simple game metadata plugin.&lt;br&gt;\n Always returns a hardcoded game with the name \"Hello World\" and the original ID \"hello-world-game\".\nPlugin-Short-Description: Example plugin for Gameyfin\nPlugin-Author: grimsi\nPlugin-License: MIT\nPlugin-Url: https://github.com/gameyfin/plugin-template\n</code></pre></p> </li> <li> <p>Main class: Create a main class for your plugin in <code>src/main/kotlin/TutorialPlugin.kt</code> with the following content:    <pre><code> // ... Package definition and imports    \n\n enum class ExampleEnum {\n   OPTION_ONE,\n   OPTION_TWO,\n   OPTION_THREE\n }\n\n class TutorialPlugin(wrapper: PluginWrapper) : ConfigurableGameyfinPlugin(wrapper) {\n\n     /**\n      * This is the configuration metadata for the plugin.\n      * All configuration values set by the admin(s) are stored encrypted in the Gameyfin database.\n      */\n     override val configMetadata: PluginConfigMetadata = listOf(\n         ConfigMetadata(\n             key = \"exampleConfigProperty\",\n             type = String::class.java,\n             label = \"Example Configuration Key\",\n             description = \"This is an example configuration key for a Gameyfin plugin.\",\n         ),\n         ConfigMetadata(\n             key = \"secretExampleConfigProperty\",\n             type = String::class.java,\n             label = \"Secret Example Configuration Key\",\n             description = \"This is a secret configuration key for a Gameyfin plugin. It will be displayed as a password field in the UI.\",\n             isSecret = true\n         ),\n         ConfigMetadata(\n             key = \"optionalExampleConfigProperty\",\n             type = String::class.java,\n             label = \"Optional Example Configuration Key\",\n             description = \"This is an optional configuration key for a Gameyfin plugin. It is not required to be set.\",\n             isRequired = false\n         ),\n         ConfigMetadata(\n             key = \"exampleConfigPropertyWithDefault\",\n             type = String::class.java,\n             label = \"Example Configuration Key with Default Value\",\n             description = \"This is an example configuration key with a default value.\",\n             default = \"default\"\n         ),\n         ConfigMetadata(\n             key = \"exampleEnumConfigProperty\",\n             type = ExampleEnum::class.java,\n             label = \"Example Enum Configuration Key\",\n             description = \"This is an example configuration key with an enum value and a default value. This will be displayed as a dropdown in the UI.\",\n             default = ExampleEnum.OPTION_ONE\n         )\n     )\n }\n</code></pre>    This class extends <code>ConfigurableGameyfinPlugin</code>, which allows you to define configuration metadata for your plugin. If your plugin does not require or offer configuration, you can extend <code>GameyfinPlugin</code> instead and omit the <code>configMetadata</code> property.    Gameyfin will automatically handle the configuration UI and database storage for you so you can focus on the plugin logic.  </p> </li> <li> <p>Config validation: Let's take a look at how to validate the config values:</p> <p>By default, Gameyfin will perform the following basic validation checks on the plugin configuration:</p> <ul> <li>Check if all required config values are present (either by using the admin provided value or the default as fallback).</li> <li>Check if the config values are of the correct type (e.g., String, Integer, Enum, etc.).</li> </ul> <p>If the verification fails, Gameyfin will not start the plugin and will show error messages in the UI.</p> <p>If you want to add custom validation logic, you can override the <code>validateConfiguration</code> method in your plugin class:  <pre><code>override fun validateConfig(config: Map&lt;String, String?&gt;): PluginConfigValidationResult {\n   // Use the built-in validation first (optional)\n   val validationResult = super.validateConfig(config)\n   if (!validationResult.isValid()) {\n       // Return early if the built-in validation failed (also optional)\n       return validationResult\n   }\n\n   // Custom validation logic\n\n   // Create a mutable map to hold validation errors (or use the one from the previous validation)\n   val errors = mutableMapOf&lt;String, String&gt;()\n\n   val exampleConfigValue = config[\"exampleConfigProperty\"]\n   if (exampleConfigValue != \"helloworld\") {\n       errors[\"exampleConfigProperty\"] = \"Value must be 'helloworld'\"\n   }\n\n   val exampleEnumConfigProperty = config[\"exampleEnumConfigProperty\"]\n   if(exampleEnumConfigProperty == null) {\n       errors[\"exampleEnumConfigProperty\"] = \"This field is required\"\n   } else if(ExampleEnum.valueOf(exampleEnumConfigProperty) == ExampleEnum.OPTION_THREE) {\n       errors[\"exampleEnumConfigProperty\"] = \"Option THREE is deprecated\"\n   }\n\n   val secretExampleConfigValue = config[\"secretExampleConfigProperty\"]\n   if(secretExampleConfigValue == null) {\n       errors[\"secretExampleConfigProperty\"] = \"This field is required\"\n   } else if (secretExampleConfigValue.length &lt; 5) {\n       errors[\"secretExampleConfigProperty\"] = \"Must be at least 5 characters long\"\n   }\n\n   // If there are validation errors, return an invalid result with the errors\n   // Otherwise, return a valid result\n   return if(errors.isNotEmpty()) {\n       PluginConfigValidationResult.INVALID(errors)\n   } else {\n       PluginConfigValidationResult.VALID\n   }\n}\n</code></pre></p> </li> <li> <p>Implement an extension: In this step we will add the functionality to fetch game metadata:</p> <p>Plugins in Gameyfin consist of one Plugin wrapper class (TutorialPlugin in our case) and one or more extensions.    Extensions are used to add functionality to Gameyfin, such as fetching game metadata while the wrapper class provides the plugin metadata to Gameyfin.</p> <p>For our example, we will implement a simple extension that returns a hardcoded game with the name \"Hello World\" and the original ID \"hello-world-game\" (the only two required fields).</p> <p>Create a new class <code>TutorialMetadataProvider</code> within the plugin class. It should be annotated with <code>@Extension</code> and implement the <code>GameMetadataProvider</code> interface:    <pre><code>@Extension\nclass TutorialMetadataProvider : GameMetadataProvider {\n\n     companion object {\n         private val log = LoggerFactory.getLogger(this::class.java)\n     }\n\n     /**\n      * Implement this method to provide game metadata from your plugin.\n      *\n      * The method receives a \"gameId\" which is usually the title of a video game.\n      * The task of your plugin is to match this gameId to one or more video games and return metadata about it.\n      * The metadata should be returned as a list of GameMetadata objects with the best match first and the worst match last.\n      * If you could not find any matches, return an empty list.\n      *\n      * The required metadata fields are:\n      * - title: The title of the game.\n      * - originalId: The unique identifier of the game from your data source (e.g. \"slug\" from IGDB, \"AppID\" from Steam, ...).\n      *\n      * The remaining fields are optional, but you should try to fill them if possible:\n      * - description: A short description of the game.\n      * - coverUrl: A URL to the cover image of the game.\n      * - screenshotUrls: A list of URLs to screenshots of the game.\n      * - videoUrls: A list of URLs to videos of the game.\n      * - releaseDate: The release date of the game.\n      * - userRating: The user rating of the game (0-100).\n      * - criticsRating: The critics rating of the game (0-100).\n      * - developedBy: The developer(s) of the game.\n      * - publishedBy: The publisher(s) of the game.\n      * - genres: A list of genres the game belongs to.\n      * - themes: A list of themes the game belongs to.\n      * - keywords: A list of keywords associated with the game.\n      * - features: A list of features the game has.\n      * - perspectives: A list of perspectives the game can be played from.\n      *\n      * @param gameId This is the name of a file or folder that Gameyfin found in a game library.\n      * @param maxResults The maximum number of results to return. You can return fewer results if you want.\n      */\n     override fun fetchByTitle(gameTitle: String, maxResults: Int): List&lt;GameMetadata&gt; {\n\n         // Log the gameId and maxResults for debugging purposes.\n         log.debug(\"HelloWorldMetadataProvider: Fetching metadata for gameTitle: {} with maxResults: {}\", gameTitle, maxResults)\n\n         // For demonstration purposes, we will return a hardcoded example result.\n         val exampleResult = GameMetadata(\n             title = \"Hello World Game\",\n             originalId = \"hello-world-game\"\n         )\n\n         // Return a list containing the example result.\n         return listOf(exampleResult)\n     }\n\n     /**\n      * Implement this method to provide game metadata by its unique identifier.\n      *\n      * The method receives an \"id\" which is usually the unique identifier of a video game from your data source.\n      * The task of your plugin is to match this id to a video game and return metadata about it.\n      * If you could not find any matches, return null.\n      *\n      * @param id The unique identifier of the game in the source your plugin implements.\n      * @return A GameMetadata object containing the metadata of the game, or null if no match was found.\n      */\n     override fun fetchById(id: String): GameMetadata? {\n         return GameMetadata(\n             title = \"Hello World Game\",\n             originalId = id\n         )\n     }\n}\n</code></pre></p> </li> <li> <p>Build the Plugin: Run the Gradle build task to compile your plugin and create a JAR file. You can do this from the command line:    <pre><code>./gradlew build\n</code></pre>    This will generate a JAR file in the <code>build/libs</code> directory.</p> </li> <li> <p>Install the Plugin: Copy the generated JAR file to the <code>plugins</code> directory of your Gameyfin installation (create the directory if it does not exist). The path should look (kind of) like this:    <pre><code>/path/to/gameyfin/plugins/plugin-helloworld.jar\n</code></pre>    Restart Gameyfin to load the plugin. You should see your plugin in the Gameyfin Administration UI under the \"Plugins\" section.</p> </li> <li> <p>Test the Plugin: Profit</p> <ul> <li>Go to the Gameyfin Administration UI and navigate to the \"Plugins\" section.</li> <li>You should see your plugin listed there. Click on it to view its details.</li> <li>If you have configured any settings, you can modify them here.</li> <li>Test the plugin by disabling all other metadata providers, adding a game to your library and triggering a library scan.</li> </ul> <p>You should see the \"Hello World Game\" in your library with the original ID \"hello-world-game\".</p> </li> </ol>"}]}